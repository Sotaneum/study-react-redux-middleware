{"version":3,"sources":["componenets/Counter.js","store/actions/counter.js","store/actions/types.js","containers/CounterContainer.js","componenets/Sample.js","store/actions/sample.js","containers/SampleContainer.js","App.js","serviceWorker.js","store/reducers/counter.js","store/actions/loading.js","lib/createRequestSaga.js","store/reducers/sample.js","lib/api.js","store/reducers/loading.js","store/reducers/index.js","index.js"],"names":["Counter","onIncrease","onDecrease","number","onClick","increase","createAction","decrease","increaseAsync","decreaseAsync","connect","state","counter","Sample","loadingPost","loadingUsers","post","users","title","body","map","user","key","id","username","email","getPost","getUsers","sample","loading","useEffect","a","console","log","fn","App","className","Boolean","window","location","hostname","match","increaseSage","decreaseSage","counterSaga","delay","put","takeEvery","takeLatest","handleActions","startLoading","requestType","finishLoading","createRequestSaga","type","request","SUCCESS","FAILURE","action","call","payload","response","data","error","sampleSaga","getPostSaga","axios","get","getUsersSaga","rootSaga","all","rootReducer","combineReducers","logger","createLogger","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9bb671e6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Counter = ({ onIncrease, onDecrease, number }) => {\n  return (\n    <div>\n      <h1>{number}</h1>\n      <button onClick={onIncrease}>+1</button>\n      <button onClick={onDecrease}>-1</button>\n    </div>\n  );\n};\n\nexport default Counter;\n","import { createAction } from \"redux-actions\";\nimport { INCREASE, DECREASE, INCREASE_ASYNC, DECREASE_ASYNC } from \"./types\";\n\nexport const increase = createAction(INCREASE);\nexport const decrease = createAction(DECREASE);\n\nexport const increaseAsync = createAction(INCREASE_ASYNC, () => undefined);\nexport const decreaseAsync = createAction(DECREASE_ASYNC, () => undefined);\n","export const INCREASE = \"counter/INCREASE\";\nexport const DECREASE = \"counter/DECREASE\";\n\nexport const INCREASE_ASYNC = \"counter/INCREASE_ASYNC\";\nexport const DECREASE_ASYNC = \"counter/DECREASE_ASYNC\";\n\nexport const GET_POST = \"sample/GET_POST\";\nexport const GET_POST_SUCCESS = \"sample/GET_POST_SUCCESS\";\n\nexport const GET_USER = \"sample/GET_USER\";\nexport const GET_USER_SUCCESS = \"sample/GET_USER_SUCCESS\";\n\nexport const START_LOADING = \"loading/START_LOADING\";\nexport const FINISH_LOADING = \"loading/FINISH_LOADING\";\n","import React from \"react\";\nimport Counter from \"../componenets/Counter\";\nimport { increaseAsync, decreaseAsync } from \"../store/actions/counter\";\nimport { connect } from \"react-redux\";\n\nconst CounterContainer = ({ number, increaseAsync, decreaseAsync }) => {\n  return (\n    <Counter\n      number={number}\n      onIncrease={increaseAsync}\n      onDecrease={decreaseAsync}\n    />\n  );\n};\n\nexport default connect(\n  (state) => ({\n    number: state.counter,\n  }),\n  {\n    increaseAsync,\n    decreaseAsync,\n  }\n)(CounterContainer);\n","import React from \"react\";\n\nconst Sample = ({ loadingPost, loadingUsers, post, users }) => {\n  return (\n    <div>\n      <section>\n        <h1>포스트</h1>\n        {loadingPost && \"로딩 중...\"}\n        {!loadingPost && post && (\n          <div>\n            <h3>{post.title}</h3>\n            <h3>{post.body}</h3>\n          </div>\n        )}\n      </section>\n      <hr />\n      <section>\n        <h1>사용자 목록</h1>\n        {loadingUsers && \"로딩 중...\"}\n        {!loadingUsers && users && (\n          <ul>\n            {users.map((user) => (\n              <li key={user.id}>\n                {user.username} ({user.email})\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </div>\n  );\n};\n\nexport default Sample;\n","import { GET_POST, GET_USER } from \"./types\";\nimport { createAction } from \"redux-actions\";\n\nexport const getPost = createAction(GET_POST, (id) => id);\nexport const getUsers = createAction(GET_USER);\n","import React, { useEffect } from \"react\";\nimport Sample from \"../componenets/Sample\";\nimport { connect } from \"react-redux\";\nimport { getPost, getUsers } from \"../store/actions/sample\";\n\nconst SampleContainer = ({\n  getPost,\n  getUsers,\n  post,\n  users,\n  loadingPost,\n  loadingUsers,\n}) => {\n  useEffect(() => {\n    const fn = async () => {\n      try {\n        await getPost(1);\n        await getUsers(1);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fn();\n  }, [getPost, getUsers]);\n  return (\n    <Sample\n      post={post}\n      users={users}\n      loadingPost={loadingPost}\n      loadingUsers={loadingUsers}\n    />\n  );\n};\n\nexport default connect(\n  ({ sample, loading }) => ({\n    post: sample.post,\n    users: sample.users,\n    loadingPost: loading[\"sample/GET_POST\"],\n    loadingUsers: loading[\"sample/GET_USERS\"],\n  }),\n  {\n    getPost,\n    getUsers,\n  }\n)(SampleContainer);\n","import React from \"react\";\nimport CounterContainer from \"./containers/CounterContainer\";\nimport SampleContainer from \"./containers/SampleContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CounterContainer />\n      <hr />\n      <SampleContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { handleActions } from \"redux-actions\";\nimport {\n  INCREASE,\n  DECREASE,\n  INCREASE_ASYNC,\n  DECREASE_ASYNC,\n} from \"../actions/types\";\nimport { increase, decrease } from \"../actions/counter\";\nimport { delay, put, takeEvery, takeLatest } from \"redux-saga/effects\";\n\nfunction* increaseSage() {\n  yield delay(1000);\n  yield put(increase());\n}\n\nfunction* decreaseSage() {\n  yield delay(1000);\n  yield put(decrease());\n}\n\nexport function* counterSaga() {\n  yield takeEvery(INCREASE_ASYNC, increaseSage);\n  yield takeLatest(DECREASE_ASYNC, decreaseSage);\n}\n\nconst initialState = 0;\n\nconst counter = handleActions(\n  {\n    [INCREASE]: (state) => state + 1,\n    [DECREASE]: (state) => state - 1,\n  },\n  initialState\n);\n\nexport default counter;\n","import { createAction } from \"redux-actions\";\nimport { START_LOADING, FINISH_LOADING } from \"./types\";\n\nexport const startLoading = createAction(\n  START_LOADING,\n  (requestType) => requestType\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  (requestType) => requestType\n);\n","import { call, put } from \"redux-saga/effects\";\nimport { startLoading, finishLoading } from \"../store/actions/loading\";\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function* (action) {\n    yield put(startLoading(type));\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    }\n    yield put(finishLoading(type));\n  };\n}\n","import {\n  GET_POST_SUCCESS,\n  GET_USER_SUCCESS,\n  GET_POST,\n  GET_USER,\n} from \"../actions/types\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport { handleActions } from \"redux-actions\";\nimport * as api from \"../../lib/api\";\nimport createRequestSaga from \"../../lib/createRequestSaga\";\n\nconst getPostSaga = createRequestSaga(GET_POST, api.getPost);\nconst getUsersSaga = createRequestSaga(GET_USER, api.getUsers);\n\nexport function* sampleSaga() {\n  yield takeLatest(GET_POST, getPostSaga);\n  yield takeLatest(GET_USER, getUsersSaga);\n}\n\nconst initialState = {\n  post: null,\n  users: null,\n};\n\nconst sample = handleActions(\n  {\n    [GET_POST_SUCCESS]: (state, action) => ({\n      ...state,\n      post: action.payload,\n    }),\n    [GET_USER_SUCCESS]: (state, action) => ({\n      ...state,\n      users: action.payload,\n    }),\n  },\n  initialState\n);\n\nexport default sample;\n","import axios from \"axios\";\n\nexport const getPost = (id) =>\n  axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);\n\nexport const getUsers = (id) =>\n  axios.get(`https://jsonplaceholder.typicode.com/users`);\n","import { handleActions } from \"redux-actions\";\nimport { START_LOADING, FINISH_LOADING } from \"../actions/types\";\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true,\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false,\n    }),\n  },\n  initialState\n);\n\nexport default loading;\n","import counter, { counterSaga } from \"./counter\";\nimport { all } from \"redux-saga/effects\";\nimport sample, { sampleSaga } from \"./sample\";\nimport loading from \"./loading\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  counter,\n  sample,\n  loading,\n});\n\nexport function* rootSaga() {\n  yield all([counterSaga(), sampleSaga()]);\n}\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer, { rootSaga } from \"./store/reducers\";\nimport { createLogger } from \"redux-logger\";\nimport ReduxThunk from \"redux-thunk\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst logger = createLogger();\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(logger, ReduxThunk, sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}